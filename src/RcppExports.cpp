// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcppClusteringEMGlassoWeighted
IntegerVector rcppClusteringEMGlassoWeighted(List InputList, double l, double r, arma::cube Pk_in, double tol, int max_iter);
RcppExport SEXP _SelvarMixExt_rcppClusteringEMGlassoWeighted(SEXP InputListSEXP, SEXP lSEXP, SEXP rSEXP, SEXP Pk_inSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type InputList(InputListSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Pk_in(Pk_inSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppClusteringEMGlassoWeighted(InputList, l, r, Pk_in, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// rcppDiscriminantAnalysisGlasso
IntegerVector rcppDiscriminantAnalysisGlasso(NumericMatrix X_, IntegerVector labels_, const int nbClust, double l, double r);
RcppExport SEXP _SelvarMixExt_rcppDiscriminantAnalysisGlasso(SEXP X_SEXP, SEXP labels_SEXP, SEXP nbClustSEXP, SEXP lSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type labels_(labels_SEXP);
    Rcpp::traits::input_parameter< const int >::type nbClust(nbClustSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppDiscriminantAnalysisGlasso(X_, labels_, nbClust, l, r));
    return rcpp_result_gen;
END_RCPP
}
// LoglikelihoodObsGaussian
List LoglikelihoodObsGaussian(NumericMatrix YNA, List mu, List sigma, NumericMatrix alpha, NumericVector prop_pi);
RcppExport SEXP _SelvarMixExt_LoglikelihoodObsGaussian(SEXP YNASEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP prop_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop_pi(prop_piSEXP);
    rcpp_result_gen = Rcpp::wrap(LoglikelihoodObsGaussian(YNA, mu, sigma, alpha, prop_pi));
    return rcpp_result_gen;
END_RCPP
}
// InitEMGaussian
List InitEMGaussian(NumericMatrix YNA, int K, std::string mecha, bool diag, Nullable<List> init, Nullable<int> samplesize);
RcppExport SEXP _SelvarMixExt_InitEMGaussian(SEXP YNASEXP, SEXP KSEXP, SEXP mechaSEXP, SEXP diagSEXP, SEXP initSEXP, SEXP samplesizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type mecha(mechaSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type init(initSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type samplesize(samplesizeSEXP);
    rcpp_result_gen = Rcpp::wrap(InitEMGaussian(YNA, K, mecha, diag, init, samplesize));
    return rcpp_result_gen;
END_RCPP
}
// MechanismEMGLM
NumericMatrix MechanismEMGLM(NumericMatrix YNA, NumericMatrix tik, std::string mecha);
RcppExport SEXP _SelvarMixExt_MechanismEMGLM(SEXP YNASEXP, SEXP tikSEXP, SEXP mechaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tik(tikSEXP);
    Rcpp::traits::input_parameter< std::string >::type mecha(mechaSEXP);
    rcpp_result_gen = Rcpp::wrap(MechanismEMGLM(YNA, tik, mecha));
    return rcpp_result_gen;
END_RCPP
}
// EMGaussian
List EMGaussian(NumericMatrix YNA, int K, std::string mecha, bool diag, int rmax, Nullable<List> init, double tol, Nullable<int> samplesize);
RcppExport SEXP _SelvarMixExt_EMGaussian(SEXP YNASEXP, SEXP KSEXP, SEXP mechaSEXP, SEXP diagSEXP, SEXP rmaxSEXP, SEXP initSEXP, SEXP tolSEXP, SEXP samplesizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type mecha(mechaSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< int >::type rmax(rmaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type samplesize(samplesizeSEXP);
    rcpp_result_gen = Rcpp::wrap(EMGaussian(YNA, K, mecha, diag, rmax, init, tol, samplesize));
    return rcpp_result_gen;
END_RCPP
}
// LoglikelihoodObsGaussianMixed
List LoglikelihoodObsGaussianMixed(const NumericMatrix& YNA, const List& mu, const List& sigma, const NumericMatrix& alpha, const NumericMatrix& beta, const NumericVector& prop_pi, const LogicalVector& is_mnar, /* optional: conditional mean & variance of Y_ij for missing cells */     Nullable<List> E_mu_list, Nullable<List> E_sig_list);
RcppExport SEXP _SelvarMixExt_LoglikelihoodObsGaussianMixed(SEXP YNASEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP prop_piSEXP, SEXP is_mnarSEXP, SEXP E_mu_listSEXP, SEXP E_sig_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< const List& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prop_pi(prop_piSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_mnar(is_mnarSEXP);
    Rcpp::traits::input_parameter< /* optional: conditional mean & variance of Y_ij for missing cells */     Nullable<List> >::type E_mu_list(E_mu_listSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type E_sig_list(E_sig_listSEXP);
    rcpp_result_gen = Rcpp::wrap(LoglikelihoodObsGaussianMixed(YNA, mu, sigma, alpha, beta, prop_pi, is_mnar, E_mu_list, E_sig_list));
    return rcpp_result_gen;
END_RCPP
}
// InitEMGaussianMixed
List InitEMGaussianMixed(NumericMatrix YNA, int K, std::string mecha, LogicalVector is_mnar, bool diag, Nullable<List> init, Nullable<int> samplesize);
RcppExport SEXP _SelvarMixExt_InitEMGaussianMixed(SEXP YNASEXP, SEXP KSEXP, SEXP mechaSEXP, SEXP is_mnarSEXP, SEXP diagSEXP, SEXP initSEXP, SEXP samplesizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type mecha(mechaSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_mnar(is_mnarSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type init(initSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type samplesize(samplesizeSEXP);
    rcpp_result_gen = Rcpp::wrap(InitEMGaussianMixed(YNA, K, mecha, is_mnar, diag, init, samplesize));
    return rcpp_result_gen;
END_RCPP
}
// MechanismEMGLMMixed
List MechanismEMGLMMixed(NumericMatrix YNA, NumericMatrix tik, std::string mecha, LogicalVector is_mnar, List E_y_list, NumericMatrix current_alpha, NumericMatrix current_beta);
RcppExport SEXP _SelvarMixExt_MechanismEMGLMMixed(SEXP YNASEXP, SEXP tikSEXP, SEXP mechaSEXP, SEXP is_mnarSEXP, SEXP E_y_listSEXP, SEXP current_alphaSEXP, SEXP current_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tik(tikSEXP);
    Rcpp::traits::input_parameter< std::string >::type mecha(mechaSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_mnar(is_mnarSEXP);
    Rcpp::traits::input_parameter< List >::type E_y_list(E_y_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type current_alpha(current_alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type current_beta(current_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(MechanismEMGLMMixed(YNA, tik, mecha, is_mnar, E_y_list, current_alpha, current_beta));
    return rcpp_result_gen;
END_RCPP
}
// EMGaussianMixed
List EMGaussianMixed(NumericMatrix YNA, int K, std::string mecha, LogicalVector is_mnar, bool diag, int rmax, Nullable<List> init, double tol, Nullable<int> samplesize);
RcppExport SEXP _SelvarMixExt_EMGaussianMixed(SEXP YNASEXP, SEXP KSEXP, SEXP mechaSEXP, SEXP is_mnarSEXP, SEXP diagSEXP, SEXP rmaxSEXP, SEXP initSEXP, SEXP tolSEXP, SEXP samplesizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type YNA(YNASEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type mecha(mechaSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_mnar(is_mnarSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< int >::type rmax(rmaxSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< Nullable<int> >::type samplesize(samplesizeSEXP);
    rcpp_result_gen = Rcpp::wrap(EMGaussianMixed(YNA, K, mecha, is_mnar, diag, rmax, init, tol, samplesize));
    return rcpp_result_gen;
END_RCPP
}
// rcppSelectS
List rcppSelectS(NumericMatrix X, std::vector<int> Order, const int nbCluster, std::string framework, std::string model_name, const int packSize, std::string Crit, IntegerVector knownlabels, IntegerVector DA);
RcppExport SEXP _SelvarMixExt_rcppSelectS(SEXP XSEXP, SEXP OrderSEXP, SEXP nbClusterSEXP, SEXP frameworkSEXP, SEXP model_nameSEXP, SEXP packSizeSEXP, SEXP CritSEXP, SEXP knownlabelsSEXP, SEXP DASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type Order(OrderSEXP);
    Rcpp::traits::input_parameter< const int >::type nbCluster(nbClusterSEXP);
    Rcpp::traits::input_parameter< std::string >::type framework(frameworkSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const int >::type packSize(packSizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type Crit(CritSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type knownlabels(knownlabelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type DA(DASEXP);
    rcpp_result_gen = Rcpp::wrap(rcppSelectS(X, Order, nbCluster, framework, model_name, packSize, Crit, knownlabels, DA));
    return rcpp_result_gen;
END_RCPP
}
// rcppSelectW
IntegerVector rcppSelectW(NumericMatrix X, std::vector<int> Order, std::vector<int> OtherVar, const int packSize);
RcppExport SEXP _SelvarMixExt_rcppSelectW(SEXP XSEXP, SEXP OrderSEXP, SEXP OtherVarSEXP, SEXP packSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type Order(OrderSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type OtherVar(OtherVarSEXP);
    Rcpp::traits::input_parameter< const int >::type packSize(packSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppSelectW(X, Order, OtherVar, packSize));
    return rcpp_result_gen;
END_RCPP
}
// rcppSelectR
IntegerVector rcppSelectR(NumericMatrix X, std::vector<int> S, std::vector<int> U, std::string regmodel);
RcppExport SEXP _SelvarMixExt_rcppSelectR(SEXP XSEXP, SEXP SSEXP, SEXP USEXP, SEXP regmodelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type S(SSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type U(USEXP);
    Rcpp::traits::input_parameter< std::string >::type regmodel(regmodelSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppSelectR(X, S, U, regmodel));
    return rcpp_result_gen;
END_RCPP
}
// rcppCrit
List rcppCrit(NumericMatrix X, List MyList, std::vector<std::string> rgm, std::vector<std::string> idm);
RcppExport SEXP _SelvarMixExt_rcppCrit(SEXP XSEXP, SEXP MyListSEXP, SEXP rgmSEXP, SEXP idmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type MyList(MyListSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rgm(rgmSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type idm(idmSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppCrit(X, MyList, rgm, idm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SelvarMixExt_rcppClusteringEMGlassoWeighted", (DL_FUNC) &_SelvarMixExt_rcppClusteringEMGlassoWeighted, 6},
    {"_SelvarMixExt_rcppDiscriminantAnalysisGlasso", (DL_FUNC) &_SelvarMixExt_rcppDiscriminantAnalysisGlasso, 5},
    {"_SelvarMixExt_LoglikelihoodObsGaussian", (DL_FUNC) &_SelvarMixExt_LoglikelihoodObsGaussian, 5},
    {"_SelvarMixExt_InitEMGaussian", (DL_FUNC) &_SelvarMixExt_InitEMGaussian, 6},
    {"_SelvarMixExt_MechanismEMGLM", (DL_FUNC) &_SelvarMixExt_MechanismEMGLM, 3},
    {"_SelvarMixExt_EMGaussian", (DL_FUNC) &_SelvarMixExt_EMGaussian, 8},
    {"_SelvarMixExt_LoglikelihoodObsGaussianMixed", (DL_FUNC) &_SelvarMixExt_LoglikelihoodObsGaussianMixed, 9},
    {"_SelvarMixExt_InitEMGaussianMixed", (DL_FUNC) &_SelvarMixExt_InitEMGaussianMixed, 7},
    {"_SelvarMixExt_MechanismEMGLMMixed", (DL_FUNC) &_SelvarMixExt_MechanismEMGLMMixed, 7},
    {"_SelvarMixExt_EMGaussianMixed", (DL_FUNC) &_SelvarMixExt_EMGaussianMixed, 9},
    {"_SelvarMixExt_rcppSelectS", (DL_FUNC) &_SelvarMixExt_rcppSelectS, 9},
    {"_SelvarMixExt_rcppSelectW", (DL_FUNC) &_SelvarMixExt_rcppSelectW, 4},
    {"_SelvarMixExt_rcppSelectR", (DL_FUNC) &_SelvarMixExt_rcppSelectR, 4},
    {"_SelvarMixExt_rcppCrit", (DL_FUNC) &_SelvarMixExt_rcppCrit, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_SelvarMixExt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
